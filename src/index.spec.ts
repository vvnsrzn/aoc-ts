import { describe, expect, test } from "vitest";
import { hxc, specFile } from "./constants.ts";
import { counter, decipher, replacer, solver } from "./index.ts";
import { postAnswer, readPuzzle } from "./libs/puzzle/index.ts";

describe("AoC", () => {

  const alpha = readPuzzle(specFile(1)).join('');
  const beta = readPuzzle(specFile(2)).join('');

  test("decipher", () => {
    expect(decipher(alpha)).toMatchInlineSnapshot(`
      [
        [
          0,
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          2,
        ],
        [
          2,
        ],
        [
          2,
        ],
        [
          2,
        ],
        [
          2,
        ],
      ]
    `);
    expect(decipher(beta)).toMatchInlineSnapshot(`
      [
        [
          0,
        ],
        [
          0,
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          2,
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          ".",
        ],
        [
          3,
        ],
        [
          3,
        ],
        [
          3,
        ],
        [
          ".",
        ],
        [
          4,
        ],
        [
          4,
        ],
        [
          ".",
        ],
        [
          5,
        ],
        [
          5,
        ],
        [
          5,
        ],
        [
          5,
        ],
        [
          ".",
        ],
        [
          6,
        ],
        [
          6,
        ],
        [
          6,
        ],
        [
          6,
        ],
        [
          ".",
        ],
        [
          7,
        ],
        [
          7,
        ],
        [
          7,
        ],
        [
          ".",
        ],
        [
          8,
        ],
        [
          8,
        ],
        [
          8,
        ],
        [
          8,
        ],
        [
          9,
        ],
        [
          9,
        ],
      ]
    `);
  })

  test("replacer", () => {
    expect(replacer(decipher(alpha))).toMatchInlineSnapshot(`
      [
        [
          0,
        ],
        [
          2,
        ],
        [
          2,
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          2,
        ],
        [
          2,
        ],
        [
          2,
        ],
      ]
    `);
    expect(replacer(decipher(beta))).toMatchInlineSnapshot(`
      [
        [
          0,
        ],
        [
          0,
        ],
        [
          9,
        ],
        [
          9,
        ],
        [
          8,
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          1,
        ],
        [
          8,
        ],
        [
          8,
        ],
        [
          8,
        ],
        [
          2,
        ],
        [
          7,
        ],
        [
          7,
        ],
        [
          7,
        ],
        [
          3,
        ],
        [
          3,
        ],
        [
          3,
        ],
        [
          6,
        ],
        [
          4,
        ],
        [
          4,
        ],
        [
          6,
        ],
        [
          5,
        ],
        [
          5,
        ],
        [
          5,
        ],
        [
          5,
        ],
        [
          6,
        ],
        [
          6,
        ],
      ]
    `);
  })
});
